// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.SearchTile.verifyAdultListBox_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyAdultListBox_Map:logWriter
    {
        
        /// <summary>
        /// verifyAdultListBox_Method - Use 'verifyAdultListBox_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyAdultListBox_Method()
        {
            #region Variable Declarations
            HtmlComboBox uIDdAdultsComboBox = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIDdAdultsComboBox;
            #endregion

            try
            {
                // Verify that the 'InnerText' property of 'ddAdults' combo box equals '1234567891011121314151617181920'
                StringAssert.Contains(this.verifyAdultListBox_MethodExpectedValues.UIDdAdultsComboBoxInnerText, uIDdAdultsComboBox.InnerText);
                WriteLogs("PASS : \"Adults\" List From Search Tile is Populated properly.");
            }
            catch (AssertFailedException ex)
            {
                takeImage("verifyAdultListBox");
                WriteLogs("FAIL : \"Adults\" List is Not Populated.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

           
        }

        public int selectAdults_Method(int MaxOCCUPANCY)
        {
            #region Variable Declarations
            HtmlComboBox uIDdAdultsComboBox = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIDdAdultsComboBox;
            #endregion
            
            string[] AdultsList = uIDdAdultsComboBox.GetContent();
            int Numofitems = MaxOCCUPANCY / 2;
            Random rnd = new Random();
            int randomAdultsNum = rnd.Next(1, Numofitems);
            int NumofAdultsSelected = 0;

            try
            {
                uIDdAdultsComboBox.SelectedIndex = randomAdultsNum;
                NumofAdultsSelected =Convert.ToInt32(uIDdAdultsComboBox.SelectedItem);
                WriteLogs("PASS : \"" + NumofAdultsSelected + "\" Adults Selected.");
            }
            catch (AssertFailedException ex)
            {
                takeImage("selectAdults");
                WriteLogs("FAIL : Could Not Select Num of Adults.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

            return NumofAdultsSelected;

        }

        public int ModifyAdultsNum_Method(int valuetoSELECT)
        {
            #region Variable Declarations
            HtmlComboBox uIDdAdultsComboBox = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIDdAdultsComboBox;
            #endregion

            string[] AdultsList = uIDdAdultsComboBox.GetContent();
            int NumofAdultsSelected = 0;

            try
            {
                uIDdAdultsComboBox.SelectedIndex = (valuetoSELECT-1);
                NumofAdultsSelected = Convert.ToInt32(uIDdAdultsComboBox.SelectedItem);
                WriteLogs("PASS : Modified Num of Adults to \"" + NumofAdultsSelected + "\".");
            }
            catch (AssertFailedException ex)
            {
                takeImage("ModifyAdultsNum");
                WriteLogs("FAIL : Could Not Modify Num of Adults.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

            return NumofAdultsSelected;

        }
        
        #region Properties
        public virtual verifyAdultListBox_MethodExpectedValues verifyAdultListBox_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyAdultListBox_MethodExpectedValues == null))
                {
                    this.mverifyAdultListBox_MethodExpectedValues = new verifyAdultListBox_MethodExpectedValues();
                }
                return this.mverifyAdultListBox_MethodExpectedValues;
            }
        }
        
        public UIVillaHolidaysThatYouWindow UIVillaHolidaysThatYouWindow
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouWindow == null))
                {
                    this.mUIVillaHolidaysThatYouWindow = new UIVillaHolidaysThatYouWindow();
                }
                return this.mUIVillaHolidaysThatYouWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyAdultListBox_MethodExpectedValues mverifyAdultListBox_MethodExpectedValues;
        
        private UIVillaHolidaysThatYouWindow mUIVillaHolidaysThatYouWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyAdultListBox_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyAdultListBox_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'ddAdults' combo box equals '1234567891011121314151617181920'
        /// </summary>
        public string UIDdAdultsComboBoxInnerText = "1234567891011121314151617181920";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouWindow : BrowserWindow
    {
        
        public UIVillaHolidaysThatYouWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIVillaHolidaysThatYouDocument UIVillaHolidaysThatYouDocument
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouDocument == null))
                {
                    this.mUIVillaHolidaysThatYouDocument = new UIVillaHolidaysThatYouDocument(this);
                }
                return this.mUIVillaHolidaysThatYouDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaHolidaysThatYouDocument mUIVillaHolidaysThatYouDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouDocument : HtmlDocument
    {
        
        public UIVillaHolidaysThatYouDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UIDdAdultsComboBox
        {
            get
            {
                if ((this.mUIDdAdultsComboBox == null))
                {
                    this.mUIDdAdultsComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDdAdultsComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ddAdults";
                    this.mUIDdAdultsComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$MainContent$quickSearch$ddAdults";
                    this.mUIDdAdultsComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "name=\"ctl00$MainContent$quickSearch$ddAd";
                    this.mUIDdAdultsComboBox.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
                    #endregion
                }
                return this.mUIDdAdultsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUIDdAdultsComboBox;
        #endregion
    }
}
