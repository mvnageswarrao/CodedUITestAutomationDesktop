// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.SearchTile.verifyIncorrectInputPopupDisplayed_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyIncorrectInputPopupDisplayed_Map:logWriter
    {
        
        /// <summary>
        /// verifyIncorrectInputPopupDisplayed_Method - Use 'verifyIncorrectInputPopupDisplayed_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyIncorrectInputPopupDisplayed_Method()
        {
            #region Variable Declarations
            HtmlDiv uIIncorrectInputPane = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIIncorrectInputPane;
            #endregion

            
                // Verify that the 'InnerText' property of 'Incorrect Input' pane equals 'Incorrect Input'
                StringAssert.Equals(this.verifyIncorrectInputPopupDisplayed_MethodExpectedValues.UIIncorrectInputPaneInnerText, uIIncorrectInputPane.InnerText);
                WriteLogs("INFO : InCorrect Input Popup Displayed.");
            
        }

        public Boolean returnIncorrectInputPopupDisplayed_Method()
        {
            #region Variable Declarations
            HtmlDiv uIIncorrectInputPane = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIIncorrectInputPane;
            #endregion

            Boolean Ispopupdisplayed = false;
            if (uIIncorrectInputPane.InnerText == null)
            {
                return Ispopupdisplayed;
            }
            else
            {
                Ispopupdisplayed = uIIncorrectInputPane.InnerText.Trim().StartsWith("Incorrect Input");
                return Ispopupdisplayed;
            }
        }
        
        #region Properties
        public virtual verifyIncorrectInputPopupDisplayed_MethodExpectedValues verifyIncorrectInputPopupDisplayed_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyIncorrectInputPopupDisplayed_MethodExpectedValues == null))
                {
                    this.mverifyIncorrectInputPopupDisplayed_MethodExpectedValues = new verifyIncorrectInputPopupDisplayed_MethodExpectedValues();
                }
                return this.mverifyIncorrectInputPopupDisplayed_MethodExpectedValues;
            }
        }
        
        public UIVillaHolidaysThatYouWindow UIVillaHolidaysThatYouWindow
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouWindow == null))
                {
                    this.mUIVillaHolidaysThatYouWindow = new UIVillaHolidaysThatYouWindow();
                }
                return this.mUIVillaHolidaysThatYouWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyIncorrectInputPopupDisplayed_MethodExpectedValues mverifyIncorrectInputPopupDisplayed_MethodExpectedValues;
        
        private UIVillaHolidaysThatYouWindow mUIVillaHolidaysThatYouWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyIncorrectInputPopupDisplayed_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyIncorrectInputPopupDisplayed_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Incorrect Input' pane equals 'Incorrect Input'
        /// </summary>
        public string UIIncorrectInputPaneInnerText = "Incorrect Input";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouWindow : BrowserWindow
    {
        
        public UIVillaHolidaysThatYouWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIVillaHolidaysThatYouDocument UIVillaHolidaysThatYouDocument
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouDocument == null))
                {
                    this.mUIVillaHolidaysThatYouDocument = new UIVillaHolidaysThatYouDocument(this);
                }
                return this.mUIVillaHolidaysThatYouDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaHolidaysThatYouDocument mUIVillaHolidaysThatYouDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouDocument : HtmlDocument
    {
        
        public UIVillaHolidaysThatYouDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIIncorrectInputPane
        {
            get
            {
                if ((this.mUIIncorrectInputPane == null))
                {
                    this.mUIIncorrectInputPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIIncorrectInputPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Incorrect Input";
                    this.mUIIncorrectInputPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "aTitle";
                    this.mUIIncorrectInputPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"aTitle\"";
                    this.mUIIncorrectInputPane.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
                    #endregion
                }
                return this.mUIIncorrectInputPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIIncorrectInputPane;
        #endregion
    }
}
