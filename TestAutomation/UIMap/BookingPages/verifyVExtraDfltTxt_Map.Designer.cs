// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.BookingPages.verifyVExtraDfltTxt_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyVExtraDfltTxt_Map:logWriter
    {
        
        /// <summary>
        /// verifyVExtraDfltTxt_Method - Use 'verifyVExtraDfltTxt_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyVExtraDfltTxt_Method(int QUALITYID, int NumofADULTS, int NumofCHILD, int NumofINFANTS, int MaxOCCUPANCY, string LineTYPE0)
        {
            #region Variable Declarations
            HtmlTable uIItemTable = this.UIYourHolidaySummaryWiWindow.UIYourHolidaySummaryDocument.UIVillaExtrasRowPane.UIItemTable;
            #endregion
            int TotalPax = NumofADULTS+NumofCHILD;
            string Expectedstring = string.Empty;
            string ZBedPrice = "£30.00";
            string VExtrasTextFrmPage = uIItemTable.InnerText;
            VExtrasTextFrmPage = VExtrasTextFrmPage.Replace("\r\n", string.Empty);
            VExtrasTextFrmPage = VExtrasTextFrmPage.Replace(" ", string.Empty).Trim();
            if (LineTYPE0 == "Villa-PK")
            {
                if (QUALITYID != 3 && TotalPax <= (MaxOCCUPANCY + 1) && NumofINFANTS == 0)
                {
                    //Expectedstring = "Z-BedFreex1Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, this.verifyVExtraDfltTxt_MethodExpectedValues.UIItemTableInnerText.Replace(" ", string.Empty).Replace("\r\n", string.Empty).Trim());
                        //StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID != 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS == 0 && NumofCHILD != 0)
                {
                    Expectedstring = "Z-BedFreex1Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID != 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS > 0 && NumofCHILD != 0)
                {
                    Expectedstring = "CotsFreex" + NumofINFANTS + "FreeZ-BedFreex1FreeHighChairFreex" + NumofINFANTS + "Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots,Z-Bed and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID != 3 && TotalPax != (MaxOCCUPANCY + 1) && NumofINFANTS > 0)
                {
                    Expectedstring = "CotsFreex" + NumofINFANTS + "FreeHighChairFreex" + NumofINFANTS + "Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID == 3 && TotalPax <= (MaxOCCUPANCY + 1) && NumofINFANTS == 0)
                {
                    try
                    {
                        //StringAssert.Matches(uIItemTable.InnerText, new Regex(this.verifyVExtraDfltTxt_MethodExpectedValues.UIItemTableInnerText));
                        StringAssert.Matches(uIItemTable.InnerText, new Regex("Free Starter Pack"));
                        WriteLogs("PASS : Villa Extras Default Text is Matched with \"Free Starter Pack\" as the selected Villa is VERY VILLAPLUS VILLA.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID == 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS == 0 && NumofCHILD != 0)
                    {
                        Expectedstring = "FreeStarterPackFreex1FreeZ-BedFreex1Free";
                        try
                        {
                            StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                            WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                        }
                        catch (AssertFailedException ex)
                        {
                            takeImage("verifyVExtraDfltTxt");
                            //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                            //WriteLogs("-----------------" + ex.Message.ToString());
                        }
                    }
                else if (QUALITYID == 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS != 0 && NumofCHILD != 0)
                {
                    Expectedstring = "FreeStarterPackFreex1FreeCotsFreex" + NumofINFANTS + "FreeZ-BedFreex1FreeHighChairFreex"+NumofINFANTS+"Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                 else if (QUALITYID == 3 && TotalPax != (MaxOCCUPANCY + 1) && NumofINFANTS > 0)
                {
                    Expectedstring = "FreeStarterPackFreex1FreeCotsFreex"+NumofINFANTS+"FreeHighChairFreex"+NumofINFANTS+"Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
            }
            else
            {
                if (QUALITYID != 3 && TotalPax <= (MaxOCCUPANCY + 1) && NumofINFANTS == 0)
                {
                    //Expectedstring = "Z-BedFreex1Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, this.verifyVExtraDfltTxt_MethodExpectedValues.UIItemTableInnerText.Replace(" ", string.Empty).Replace("\r\n", string.Empty).Trim());
                        //StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID != 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS == 0 && NumofCHILD != 0)
                {
                    Expectedstring = "Z-BedFreex1Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID != 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS > 0 && NumofCHILD != 0)
                {
                    //Expectedstring = "CotsFreex" + NumofCHILD + "FreeZ-BedFreex1FreeHighChairFreex" + NumofCHILD + "Free";
                    Expectedstring = "Z-Bed" + ZBedPrice + "x1"+ZBedPrice+"";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots,Z-Bed and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                //else if (QUALITYID == 1 && TotalPax != (MaxOCCUPANCY + 1) && NumofINFANTS > 0)
                //{
                //    //Expectedstring = "CotsFreex" + NumofINFANTS + "FreeHighChairFreex" + NumofINFANTS + "Free";
                //    Expectedstring = "Cots,highchairs,starterpackscanbeincludedbyclickingonthe''AddVillaExtras''button.";
                //    try
                //    {
                //        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                //        WriteLogs("PASS : Villa Extras Default Text(Shown Cots and High Chair) is Matched.");
                //    }
                //    catch (AssertFailedException ex)
                //    {
                //        WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                //        WriteLogs("-----------------" + ex.Message.ToString());
                //    }
                //}
                else if (QUALITYID != 3 && TotalPax != (MaxOCCUPANCY + 1) && NumofINFANTS > 0)
                {
                    //Expectedstring = "CotsFreex" + NumofINFANTS + "FreeHighChairFreex" + NumofINFANTS + "Free";
                    Expectedstring = "Cots,highchairs,starterpackscanbeincludedbyclickingonthe''AddVillaExtras''button.";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }

                else if (QUALITYID == 3 && TotalPax <= (MaxOCCUPANCY + 1) && NumofINFANTS == 0)
                {
                    try
                    {
                        //StringAssert.Matches(uIItemTable.InnerText, new Regex(this.verifyVExtraDfltTxt_MethodExpectedValues.UIItemTableInnerText));
                        StringAssert.Matches(uIItemTable.InnerText, new Regex("Free Starter Pack"));
                        WriteLogs("PASS : Villa Extras Default Text is Matched with \"Free Starter Pack\" as the selected Villa is VERY VILLAPLUS VILLA.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                else if (QUALITYID == 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS == 0 && NumofCHILD != 0)
                    {
                        Expectedstring = "FreeStarterPackFreex1FreeZ-BedFreex1Free";
                        try
                        {
                            StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                            WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                        }
                        catch (AssertFailedException ex)
                        {
                            takeImage("verifyVExtraDfltTxt");
                            //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                            //WriteLogs("-----------------" + ex.Message.ToString());
                        }
                    }
                else if (QUALITYID == 3 && TotalPax == (MaxOCCUPANCY + 1) && NumofINFANTS != 0 && NumofCHILD != 0)
                {
                    Expectedstring = "FreeStarterPackFreex1FreeZ-Bed"+ZBedPrice+"x1"+ZBedPrice+"";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(ShownZ-Bed) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
                 else if (QUALITYID == 3 && TotalPax != (MaxOCCUPANCY + 1) && NumofINFANTS > 0)
                {
                    Expectedstring = "FreeStarterPackFreex1Free";
                    try
                    {
                        StringAssert.Contains(VExtrasTextFrmPage, Expectedstring);
                        WriteLogs("PASS : Villa Extras Default Text(Shown Cots and High Chair) is Matched.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("verifyVExtraDfltTxt");
                        //WriteLogs("FAIL : Villa Extras Default Text is Not Matched.");
                        //WriteLogs("-----------------" + ex.Message.ToString());
                    }
                }
            }
        }
                    
        #region Properties
        public virtual verifyVExtraDfltTxt_MethodExpectedValues verifyVExtraDfltTxt_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyVExtraDfltTxt_MethodExpectedValues == null))
                {
                    this.mverifyVExtraDfltTxt_MethodExpectedValues = new verifyVExtraDfltTxt_MethodExpectedValues();
                }
                return this.mverifyVExtraDfltTxt_MethodExpectedValues;
            }
        }
        
        public UIYourHolidaySummaryWiWindow UIYourHolidaySummaryWiWindow
        {
            get
            {
                if ((this.mUIYourHolidaySummaryWiWindow == null))
                {
                    this.mUIYourHolidaySummaryWiWindow = new UIYourHolidaySummaryWiWindow();
                }
                return this.mUIYourHolidaySummaryWiWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyVExtraDfltTxt_MethodExpectedValues mverifyVExtraDfltTxt_MethodExpectedValues;
        
        private UIYourHolidaySummaryWiWindow mUIYourHolidaySummaryWiWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyVExtraDfltTxt_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyVExtraDfltTxt_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of table matches '
        ///
        ///Cots, high chairs, starter packs can be included by clicking on the ''Add/Amend Villa Extras'' button. 
        ///
        ///
        ///   '
        /// </summary>
        public string UIItemTableInnerText = "\r\n\r\nCots, high chairs, starter packs can be included by clicking on the \'\'Add" +
            " Villa Extras\'\' button. \r\n\r\n\r\n   ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryWiWindow : BrowserWindow
    {
        
        public UIYourHolidaySummaryWiWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYourHolidaySummaryDocument UIYourHolidaySummaryDocument
        {
            get
            {
                if ((this.mUIYourHolidaySummaryDocument == null))
                {
                    this.mUIYourHolidaySummaryDocument = new UIYourHolidaySummaryDocument(this);
                }
                return this.mUIYourHolidaySummaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYourHolidaySummaryDocument mUIYourHolidaySummaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryDocument : HtmlDocument
    {
        
        public UIYourHolidaySummaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIVillaExtrasRowPane UIVillaExtrasRowPane
        {
            get
            {
                if ((this.mUIVillaExtrasRowPane == null))
                {
                    this.mUIVillaExtrasRowPane = new UIVillaExtrasRowPane(this);
                }
                return this.mUIVillaExtrasRowPane;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaExtrasRowPane mUIVillaExtrasRowPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaExtrasRowPane : HtmlDiv
    {
        
        public UIVillaExtrasRowPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "villaExtrasRow";
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "contentText aRow";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"contentText aRow\" id=\"villaExtrasRow\" style=\"visibility: visible;\"";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public HtmlTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new HtmlTable(this);
                    #region Search Criteria
                    this.mUIItemTable.FilterProperties.Add(new PropertyExpression(HtmlTable.PropertyNames.InnerText, "Cots, high chairs, starter packs can be ", PropertyExpressionOperator.Contains));
                    this.mUIItemTable.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"";
                    this.mUIItemTable.FilterProperties[HtmlTable.PropertyNames.RowCount] = "5";
                    this.mUIItemTable.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "9";
                    this.mUIItemTable.WindowTitles.Add("Your Holiday Summary");
                    #endregion
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlTable mUIItemTable;
        #endregion
    }
}
