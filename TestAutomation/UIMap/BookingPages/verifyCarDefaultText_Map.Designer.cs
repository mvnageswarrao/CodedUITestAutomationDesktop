// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.BookingPages.verifyCarDefaultText_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class verifyCarDefaultText_Map:logWriter
    {
        
        /// <summary>
        /// verifyCarDefaultText_Method - Use 'verifyCarDefaultText_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyCarDefaultText_Method(int carreqID, string VillaFULLNAME)
        {
            #region Variable Declarations
            HtmlCell uIWehaveclassifiedBeatCell = this.UIYourHolidaySummaryWiWindow.UIYourHolidaySummaryDocument.UICarHireCellCell.UIItemTable.UIWehaveclassifiedBeatCell;
            #endregion

            // Verify that the 'InnerText' property of 'We have classified Beatriz as CAR ESSENT' cell contains 'CAR ESSENTIAL 
            //
            //Cars are ideal for getting around the local area in your own time. You’ll need a car at this villa to get to the local bars, restaurants, shops and the beach but it’s also great to explore the rest of your destination and make the most out of your stay!
            //
            //The costs of taxis and transfers can also add up and could end up exceeding  what you would pay for hiring a car.'
            //StringAssert.Contains(uIWehaveclassifiedBeatCell.InnerText, this.verifyCarDefaultText_MethodExpectedValues.UIWehaveclassifiedBeatCellInnerText, "Failed");

            string txtfromPage = uIWehaveclassifiedBeatCell.InnerText;
            txtfromPage = txtfromPage.Replace("\r\n", string.Empty);
            txtfromPage = txtfromPage.Replace(" ", string.Empty);
            txtfromPage = txtfromPage.Trim();

            string TextToVerifyCase1 = "we have classified " + VillaFULLNAME + " as ‘Car not required’ and local amenities are within walking distance, we know from experience that hiring a car enhances any villa holiday.";
            TextToVerifyCase1 = TextToVerifyCase1.Replace(" ", string.Empty);
            TextToVerifyCase1 = TextToVerifyCase1.Trim();
            string TextToVerifyCase2 = "we have classified " + VillaFULLNAME + " as ‘Car Useful’, we would recommend hiring a car to make the most of your villa holiday.";
            TextToVerifyCase2 = TextToVerifyCase2.Replace(" ", string.Empty);
            TextToVerifyCase2 = TextToVerifyCase2.Trim();
            string TextToVerifyCase3 = "we have classified " + VillaFULLNAME + " as ‘Car Essential’, we strongly recommend that you hire a car to make the most of your villa holiday.";
            TextToVerifyCase3 = TextToVerifyCase3.Replace(" ", string.Empty);
            TextToVerifyCase3 = TextToVerifyCase3.Trim();
            try
            {
                if (carreqID == 1)
                {
                    //StringAssert.Equals(txtfromPage,TextToVerifyCase1);
                    StringAssert.Contains(txtfromPage, TextToVerifyCase1);
                    WriteLogs("PASS : Car Hire(CAR NOT REQUIRED) Default Text is Matched.");
                    //StringAssert.Contains(uIWehaveclassifiedBeatCell.InnerText, VillaFULLNAME);
                    //WriteLogs("PASS : Villa Full Name (" + VillaFULLNAME + ") in Car Hire Default Text is Matched.");
                }
                else if (carreqID == 2)
                {
                    StringAssert.Contains(txtfromPage, TextToVerifyCase2);
                    WriteLogs("PASS : Car Hire(CAR USEFUL) Default Text is Matched.");
                    //StringAssert.Contains(uIWehaveclassifiedBeatCell.InnerText, VillaFULLNAME);
                    //WriteLogs("PASS : Villa Full Name (" + VillaFULLNAME + ") in Car Hire Default Text is Matched.");
                }
                else if (carreqID == 3)
                {
                    StringAssert.Contains(txtfromPage, TextToVerifyCase3);
                    WriteLogs("PASS : Car Hire(CAR ESSENTIAL) Default Text is Matched.");
                    //StringAssert.Contains(uIWehaveclassifiedBeatCell.InnerText, VillaFULLNAME);
                    //WriteLogs("PASS : Villa Full Name ("+VillaFULLNAME+") in Car Hire Default Text is Matched.");
                }
            }

            catch (AssertFailedException ex)
            {
                takeImage("verifyCarDefaultText");
                WriteLogs("FAIL : Car Hire Default Text is Not Matched.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

        }
        
        #region Properties
        public virtual verifyCarDefaultText_MethodExpectedValues verifyCarDefaultText_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyCarDefaultText_MethodExpectedValues == null))
                {
                    this.mverifyCarDefaultText_MethodExpectedValues = new verifyCarDefaultText_MethodExpectedValues();
                }
                return this.mverifyCarDefaultText_MethodExpectedValues;
            }
        }
        
        public UIYourHolidaySummaryWiWindow UIYourHolidaySummaryWiWindow
        {
            get
            {
                if ((this.mUIYourHolidaySummaryWiWindow == null))
                {
                    this.mUIYourHolidaySummaryWiWindow = new UIYourHolidaySummaryWiWindow();
                }
                return this.mUIYourHolidaySummaryWiWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyCarDefaultText_MethodExpectedValues mverifyCarDefaultText_MethodExpectedValues;
        
        private UIYourHolidaySummaryWiWindow mUIYourHolidaySummaryWiWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyCarDefaultText_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class verifyCarDefaultText_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'We have classified' cell contains 'CAR ESSENTIAL 
        ///
        ///Cars are ideal for getting around the local area in your own time. You’ll need a car at this villa to get to the local bars, restaurants, shops and the beach but it’s also great to explore the rest of your destination and make the most out of your stay!
        ///
        ///The costs of taxis and transfers can also add up and could end up exceeding  what you would pay for hiring a car.'
        /// </summary>
        public string UIWehaveclassifiedBeatCellInnerText = @"CAR ESSENTIAL 

Cars are ideal for getting around the local area in your own time. You’ll need a car at this villa to get to the local bars, restaurants, shops and the beach but it’s also great to explore the rest of your destination and make the most out of your stay!

The costs of taxis and transfers can also add up and could end up exceeding  what you would pay for hiring a car.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIYourHolidaySummaryWiWindow : BrowserWindow
    {
        
        public UIYourHolidaySummaryWiWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYourHolidaySummaryDocument UIYourHolidaySummaryDocument
        {
            get
            {
                if ((this.mUIYourHolidaySummaryDocument == null))
                {
                    this.mUIYourHolidaySummaryDocument = new UIYourHolidaySummaryDocument(this);
                }
                return this.mUIYourHolidaySummaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYourHolidaySummaryDocument mUIYourHolidaySummaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIYourHolidaySummaryDocument : HtmlDocument
    {
        
        public UIYourHolidaySummaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UICarHireCellCell UICarHireCellCell
        {
            get
            {
                if ((this.mUICarHireCellCell == null))
                {
                    this.mUICarHireCellCell = new UICarHireCellCell(this);
                }
                return this.mUICarHireCellCell;
            }
        }
        #endregion
        
        #region Fields
        private UICarHireCellCell mUICarHireCellCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICarHireCellCell : HtmlCell
    {
        
        public UICarHireCellCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlCell.PropertyNames.Id] = "carHireCell";
            this.SearchProperties[HtmlCell.PropertyNames.Name] = null;
            this.SearchProperties.Add(new PropertyExpression(HtmlCell.PropertyNames.InnerText, "Car Hire  \r\n Price Quantity Total \r\n\r\n\r\n", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "id=\"carHireCell\" colspan=\"9\"";
            this.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "16";
            this.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
            this.FilterProperties[HtmlCell.PropertyNames.Class] = null;
            this.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "252";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties.Add(new PropertyExpression(HtmlTable.PropertyNames.InnerText, "We have classified Beatriz as CAR ESSENT", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "width=\"100%\" border=\"0\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "1";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "25";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIWehaveclassifiedBeatCell
        {
            get
            {
                if ((this.mUIWehaveclassifiedBeatCell == null))
                {
                    this.mUIWehaveclassifiedBeatCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIWehaveclassifiedBeatCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIWehaveclassifiedBeatCell.SearchProperties.Add(new PropertyExpression(HtmlCell.PropertyNames.InnerText, "We have classified ", PropertyExpressionOperator.Contains));
                    this.mUIWehaveclassifiedBeatCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "width=\"650\" class=\"contentText hsContentIndent\" style=\"color: rgb(51, 51, 51);\"";
                    this.mUIWehaveclassifiedBeatCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUIWehaveclassifiedBeatCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIWehaveclassifiedBeatCell.FilterProperties.Add(new PropertyExpression(HtmlCell.PropertyNames.Class, "contentText hsContentIndent", PropertyExpressionOperator.Contains));
                    this.mUIWehaveclassifiedBeatCell.WindowTitles.Add("Your Holiday Summary");
                    #endregion
                }
                return this.mUIWehaveclassifiedBeatCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIWehaveclassifiedBeatCell;
        #endregion
    }
}
