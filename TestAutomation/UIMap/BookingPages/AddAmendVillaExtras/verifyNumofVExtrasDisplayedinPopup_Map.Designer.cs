// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.BookingPages.AddAmendVillaExtras.verifyNumofVExtrasDisplayedinPopup_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    using System.Configuration;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyNumofVExtrasDisplayedinPopup_Map:logWriter
    {
        
        /// <summary>
        /// verifyNumofVExtrasDisplayedinPopup_Method - Use 'verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyNumofVExtrasDisplayedinPopup_Method(int VExtrasCOUNTFRMDB, List<string> ListOfVEXTRASFrmDB, int MaxOCCUPANCY, int NumofADULTS, int NumofCHILD, int NumofINFANTS)
        {
            #region Variable Declarations
            HtmlSpan uIStarterPackPane = this.UIYourHolidaySummaryWiWindow.UIYourHolidaySummaryDocument.UIAmendVillaExtrasSeleFrame.UIVillaPlusPackageHoliDocument.UIStarterPackPane;
            #endregion

            //int NoofAdults = Convert.ToInt32(ConfigurationManager.AppSettings["NoofAdults"].ToString());
            //int Noofchild = Convert.ToInt32(ConfigurationManager.AppSettings["NoofChild"].ToString());
            int TotalPax = (NumofADULTS + NumofCHILD);

            //HtmlSpan uIStarterPackPane1 = runScript.verifyNumofVExtrasDisplayedinPopup_Obj.getNumofVExtrasDisplayedinPopup_Method();
            UITestControlCollection UIVExtras = uIStarterPackPane.FindMatchingControls();
            int NumofVExtrasDisplayedonPage = UIVExtras.Count;

            List<string> VExtrasListFromPage = new List<string>();
            foreach (HtmlSpan VExtrasLable in UIVExtras)
            {
                string VExtras = VExtrasLable.InnerText;
                VExtrasListFromPage.Add(VExtras);
            }

            if (TotalPax > MaxOCCUPANCY)
            {
                try
                {
                    // Verify that the Number of V Extras displayed on Page is matched with DB count'
                    Assert.AreEqual(VExtrasCOUNTFRMDB, NumofVExtrasDisplayedonPage);
                    WriteLogs("PASS : Number Villa Extras displayed on Page matched with the Count from DB.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyNumofVExtrasDisplayedinPopup");
                    WriteLogs("FAIL : Number Villa Extras displayed on Page Not matched with the Count from DB.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }

                try
                {
                    // Verify that the All the Villa Extras Listed in DB are displayed on Page'
                    StringAssert.Equals(ListOfVEXTRASFrmDB.ToString(), VExtrasListFromPage.ToString());
                    WriteLogs("PASS : All the Villa Extras Listed in DB are displayed on Page.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyNumofVExtrasDisplayedinPopup");
                    WriteLogs("FAIL : All the Villa Extras Listed in DB are Not displayed on Page.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }
            }
            else
            {

                ListOfVEXTRASFrmDB.Remove("Z-Bed");
                int ModVExtrasCOUNTFRMDB = ListOfVEXTRASFrmDB.Count;

                try
                {
                    // Verify that the All the Villa Extras Listed in DB are displayed on Page'
                    StringAssert.Equals(ListOfVEXTRASFrmDB.ToString(), VExtrasListFromPage.ToString());
                    WriteLogs("PASS : All the Villa Extras Listed in DB are displayed on Page.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyNumofVExtrasDisplayedinPopup");
                    WriteLogs("FAIL : All the Villa Extras Listed in DB are Not displayed on Page.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }

                try
                {
                    // Verify that the Number of V Extras displayed on Page is matched with DB count'
                    Assert.AreEqual(ModVExtrasCOUNTFRMDB, NumofVExtrasDisplayedonPage);
                    WriteLogs("PASS : Number Villa Extras displayed on Page matched with the Count from DB.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyNumofVExtrasDisplayedinPopup");
                    WriteLogs("FAIL : Number Villa Extras displayed on Page Not matched with the Count from DB.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }

            }

            // Verify that the 'Id' property of 'Starter Pack' pane equals 'ctl00_ContentPlaceHolder1_rept1_ctl01_lblDescription'
            //Assert.AreEqual(this.verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues.UIStarterPackPaneId, uIStarterPackPane.Id);
        }

        #region Properties
        public virtual verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyNumofVExtrasDisplayedinPopup_MethodExpectedValues == null))
                {
                    this.mverifyNumofVExtrasDisplayedinPopup_MethodExpectedValues = new verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues();
                }
                return this.mverifyNumofVExtrasDisplayedinPopup_MethodExpectedValues;
            }
        }
        
        public UIYourHolidaySummaryWiWindow UIYourHolidaySummaryWiWindow
        {
            get
            {
                if ((this.mUIYourHolidaySummaryWiWindow == null))
                {
                    this.mUIYourHolidaySummaryWiWindow = new UIYourHolidaySummaryWiWindow();
                }
                return this.mUIYourHolidaySummaryWiWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues mverifyNumofVExtrasDisplayedinPopup_MethodExpectedValues;
        
        private UIYourHolidaySummaryWiWindow mUIYourHolidaySummaryWiWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyNumofVExtrasDisplayedinPopup_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyNumofVExtrasDisplayedinPopup_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Id' property of 'Starter Pack' pane equals 'ctl00_ContentPlaceHolder1_rept1_ctl01_lblDescription'
        /// </summary>
        public string UIStarterPackPaneId = "ctl00_ContentPlaceHolder1_rept1_ctl01_lblDescription";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryWiWindow : BrowserWindow
    {
        
        public UIYourHolidaySummaryWiWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYourHolidaySummaryDocument UIYourHolidaySummaryDocument
        {
            get
            {
                if ((this.mUIYourHolidaySummaryDocument == null))
                {
                    this.mUIYourHolidaySummaryDocument = new UIYourHolidaySummaryDocument(this);
                }
                return this.mUIYourHolidaySummaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYourHolidaySummaryDocument mUIYourHolidaySummaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryDocument : HtmlDocument
    {
        
        public UIYourHolidaySummaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIAmendVillaExtrasSeleFrame UIAmendVillaExtrasSeleFrame
        {
            get
            {
                if ((this.mUIAmendVillaExtrasSeleFrame == null))
                {
                    this.mUIAmendVillaExtrasSeleFrame = new UIAmendVillaExtrasSeleFrame(this);
                }
                return this.mUIAmendVillaExtrasSeleFrame;
            }
        }
        #endregion
        
        #region Fields
        private UIAmendVillaExtrasSeleFrame mUIAmendVillaExtrasSeleFrame;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAmendVillaExtrasSeleFrame : HtmlIFrame
    {
        
        public UIAmendVillaExtrasSeleFrame(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlFrame.PropertyNames.Id] = "amendVillaExtrasSelection";
            this.SearchProperties[HtmlFrame.PropertyNames.Name] = "amendVillaExtrasSelection";
            this.FilterProperties.Add(new PropertyExpression(HtmlFrame.PropertyNames.AbsolutePath, "amendVillaExtra.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlFrame.PropertyNames.PageUrl, "amendVillaExtra.aspx?", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlFrame.PropertyNames.ControlDefinition] = "name=\"amendVillaExtrasSelection\" id=\"ame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIVillaPlusPackageHoliDocument UIVillaPlusPackageHoliDocument
        {
            get
            {
                if ((this.mUIVillaPlusPackageHoliDocument == null))
                {
                    this.mUIVillaPlusPackageHoliDocument = new UIVillaPlusPackageHoliDocument(this);
                }
                return this.mUIVillaPlusPackageHoliDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaPlusPackageHoliDocument mUIVillaPlusPackageHoliDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaPlusPackageHoliDocument : HtmlDocument
    {
        
        public UIVillaPlusPackageHoliDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/amendVillaExtra.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/amendVillaExtra.aspx?", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIStarterPackPane
        {
            get
            {
                if ((this.mUIStarterPackPane == null))
                {
                    this.mUIStarterPackPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIStarterPackPane.SearchProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.Id, "ctl00_ContentPlaceHolder1_rept1_", PropertyExpressionOperator.Contains));
                    this.mUIStarterPackPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.ControlDefinition, "id=\"ctl00_ContentPlaceHolder1_rept1_", PropertyExpressionOperator.Contains));
                    this.mUIStarterPackPane.WindowTitles.Add("Your Holiday Summary");
                    #endregion
                }
                return this.mUIStarterPackPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIStarterPackPane;
        #endregion
    }
}
