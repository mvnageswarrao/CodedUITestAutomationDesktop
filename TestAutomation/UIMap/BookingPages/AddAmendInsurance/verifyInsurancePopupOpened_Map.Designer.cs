// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.BookingPages.AddAmendInsurance.verifyInsurancePopupOpened_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyInsurancePopupOpened_Map:logWriter
    {
        
        /// <summary>
        /// verifyInsurancePopupOpened_Method - Use 'verifyInsurancePopupOpened_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyInsurancePopupOpened_Method()
        {
            #region Variable Declarations
            HtmlCell uIAddAmendTravelInsuraCell = this.UIYourHolidaySummaryWiWindow.UIYourHolidaySummaryDocument.UIAmendInsuranceSelectFrame.UIVillaPlusPackageHoliDocument.UIAspnetFormCustom.UIItemTable.UIAddAmendTravelInsuraCell;
            #endregion

            try
            {
                // Verify that the 'InnerText' property of 'Add/Amend Travel Insurance' cell equals 'Add/Amend Travel Insurance'
                Assert.AreEqual(this.verifyInsurancePopupOpened_MethodExpectedValues.UIAddAmendTravelInsuraCellInnerText, uIAddAmendTravelInsuraCell.InnerText);
                WriteLogs("PASS : Opened \"Add/Amend Insurance\"popup.");
            }
            catch (AssertFailedException ex)
            {
                takeImage("verifyInsurancePopupOpened");
                WriteLogs("FAIL : Could Not Open \"Add/Amend Insurance\" Popup.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

            
        }
        
        #region Properties
        public virtual verifyInsurancePopupOpened_MethodExpectedValues verifyInsurancePopupOpened_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyInsurancePopupOpened_MethodExpectedValues == null))
                {
                    this.mverifyInsurancePopupOpened_MethodExpectedValues = new verifyInsurancePopupOpened_MethodExpectedValues();
                }
                return this.mverifyInsurancePopupOpened_MethodExpectedValues;
            }
        }
        
        public UIYourHolidaySummaryWiWindow UIYourHolidaySummaryWiWindow
        {
            get
            {
                if ((this.mUIYourHolidaySummaryWiWindow == null))
                {
                    this.mUIYourHolidaySummaryWiWindow = new UIYourHolidaySummaryWiWindow();
                }
                return this.mUIYourHolidaySummaryWiWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyInsurancePopupOpened_MethodExpectedValues mverifyInsurancePopupOpened_MethodExpectedValues;
        
        private UIYourHolidaySummaryWiWindow mUIYourHolidaySummaryWiWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyInsurancePopupOpened_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyInsurancePopupOpened_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Add/Amend Travel Insurance' cell equals 'Add/Amend Travel Insurance'
        /// </summary>
        public string UIAddAmendTravelInsuraCellInnerText = "Add/Amend Travel Insurance";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryWiWindow : BrowserWindow
    {
        
        public UIYourHolidaySummaryWiWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYourHolidaySummaryDocument UIYourHolidaySummaryDocument
        {
            get
            {
                if ((this.mUIYourHolidaySummaryDocument == null))
                {
                    this.mUIYourHolidaySummaryDocument = new UIYourHolidaySummaryDocument(this);
                }
                return this.mUIYourHolidaySummaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYourHolidaySummaryDocument mUIYourHolidaySummaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYourHolidaySummaryDocument : HtmlDocument
    {
        
        public UIYourHolidaySummaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIAmendInsuranceSelectFrame UIAmendInsuranceSelectFrame
        {
            get
            {
                if ((this.mUIAmendInsuranceSelectFrame == null))
                {
                    this.mUIAmendInsuranceSelectFrame = new UIAmendInsuranceSelectFrame(this);
                }
                return this.mUIAmendInsuranceSelectFrame;
            }
        }
        #endregion
        
        #region Fields
        private UIAmendInsuranceSelectFrame mUIAmendInsuranceSelectFrame;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAmendInsuranceSelectFrame : HtmlIFrame
    {
        
        public UIAmendInsuranceSelectFrame(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlFrame.PropertyNames.Id] = "amendInsuranceSelection";
            this.SearchProperties[HtmlFrame.PropertyNames.Name] = "amendInsuranceSelection";
            this.FilterProperties.Add(new PropertyExpression(HtmlFrame.PropertyNames.AbsolutePath, "amendInsurance.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlFrame.PropertyNames.PageUrl, "amendInsurance.aspx?", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlFrame.PropertyNames.ControlDefinition] = "name=\"amendInsuranceSelection\" id=\"amend";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIVillaPlusPackageHoliDocument UIVillaPlusPackageHoliDocument
        {
            get
            {
                if ((this.mUIVillaPlusPackageHoliDocument == null))
                {
                    this.mUIVillaPlusPackageHoliDocument = new UIVillaPlusPackageHoliDocument(this);
                }
                return this.mUIVillaPlusPackageHoliDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaPlusPackageHoliDocument mUIVillaPlusPackageHoliDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaPlusPackageHoliDocument : HtmlDocument
    {
        
        public UIVillaPlusPackageHoliDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Villa Plus Package Holiday Summary Amendment";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/amendInsurance.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/amendInsurance.aspx?", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIAspnetFormCustom UIAspnetFormCustom
        {
            get
            {
                if ((this.mUIAspnetFormCustom == null))
                {
                    this.mUIAspnetFormCustom = new UIAspnetFormCustom(this);
                }
                return this.mUIAspnetFormCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIAspnetFormCustom mUIAspnetFormCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAspnetFormCustom : HtmlCustom
    {
        
        public UIAspnetFormCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "aspnetForm";
            this.FilterProperties["ControlDefinition"] = "id=\"aspnetForm\" action=\"amendInsurance.a";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Add/Amend Travel Insurance";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIAddAmendTravelInsuraCell
        {
            get
            {
                if ((this.mUIAddAmendTravelInsuraCell == null))
                {
                    this.mUIAddAmendTravelInsuraCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIAddAmendTravelInsuraCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Add/Amend Travel Insurance";
                    this.mUIAddAmendTravelInsuraCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "width=\"100%\" class=\"frameBg\"";
                    this.mUIAddAmendTravelInsuraCell.FilterProperties[HtmlCell.PropertyNames.Class] = "frameBg";
                    this.mUIAddAmendTravelInsuraCell.WindowTitles.Add("Your Holiday Summary");
                    #endregion
                }
                return this.mUIAddAmendTravelInsuraCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIAddAmendTravelInsuraCell;
        #endregion
    }
}
