// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.BookingPages.verifyADWDfltTxt_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class verifyADWDfltTxt_Map:logWriter
    {
        
        /// <summary>
        /// verifyADWDfltTxt_Method - Use 'verifyADWDfltTxt_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyADWDfltTxt_Method(string LineTYPE)
        {
            #region Variable Declarations
            HtmlCell uIAdwNoteCell = this.UIYourHolidaySummaryWiWindow.UIYourHolidaySummaryDocument.UIAdwNoteCell;
            #endregion

            string ADWTextFrmPage = uIAdwNoteCell.InnerText;
            ADWTextFrmPage = ADWTextFrmPage.Replace(" ", string.Empty);
            ADWTextFrmPage = ADWTextFrmPage.Trim();

            // Verify that the 'InnerText' property of 'adwNote' cell matches '
            //NOTE: The ADW amount is subject to change or the ADW may change to Security Deposit based on the selected passenger
            // details.'
            //StringAssert.Matches(uIAdwNoteCell.InnerText, new Regex(this.verifyADWDfltTxt_MethodExpectedValues.UIAdwNoteCellInnerText), "Not Matched");

            string ExpectedADWStringtoMatchForPK = "NOTE: The ADW amount is subject to change or the ADW may change to Security Deposit based on the selected passenge details.";
            ExpectedADWStringtoMatchForPK = ExpectedADWStringtoMatchForPK.Replace(" ", string.Empty);
            ExpectedADWStringtoMatchForPK = ExpectedADWStringtoMatchForPK.Trim();
            string ExpectedADWStringtoMatchForVO = "NOTE: The ADW amount is subject to change or the ADW may change to Security Deposit based on the selected party member details.";
            ExpectedADWStringtoMatchForVO = ExpectedADWStringtoMatchForVO.Replace(" ", string.Empty);
            ExpectedADWStringtoMatchForVO = ExpectedADWStringtoMatchForVO.Trim();

            LineTYPE = LineTYPE.Trim();

            if (LineTYPE == "Villa-On")
            {
                try
                {
                    StringAssert.Equals(ADWTextFrmPage, ExpectedADWStringtoMatchForVO);
                    WriteLogs("PASS : ADW Default Text For VO Booking is Matched.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyADWDfltTxt");
                    WriteLogs("FAIL : ADW Default Text For VO Booking is Not Matched.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }
            }
            else
            {
                try
                {
                    StringAssert.Equals(ADWTextFrmPage, ExpectedADWStringtoMatchForPK);
                    WriteLogs("PASS : ADW Default Text is Matched.");
                }
                catch (AssertFailedException ex)
                {
                    takeImage("verifyADWDfltTxt");
                    WriteLogs("FAIL : ADW Default Text is Not Matched.");
                    WriteLogs("-----------------" + ex.Message.ToString());
                }
            }
        }
        
        #region Properties
        public virtual verifyADWDfltTxt_MethodExpectedValues verifyADWDfltTxt_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyADWDfltTxt_MethodExpectedValues == null))
                {
                    this.mverifyADWDfltTxt_MethodExpectedValues = new verifyADWDfltTxt_MethodExpectedValues();
                }
                return this.mverifyADWDfltTxt_MethodExpectedValues;
            }
        }
        
        public UIYourHolidaySummaryWiWindow UIYourHolidaySummaryWiWindow
        {
            get
            {
                if ((this.mUIYourHolidaySummaryWiWindow == null))
                {
                    this.mUIYourHolidaySummaryWiWindow = new UIYourHolidaySummaryWiWindow();
                }
                return this.mUIYourHolidaySummaryWiWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyADWDfltTxt_MethodExpectedValues mverifyADWDfltTxt_MethodExpectedValues;
        
        private UIYourHolidaySummaryWiWindow mUIYourHolidaySummaryWiWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyADWDfltTxt_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class verifyADWDfltTxt_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'adwNote' cell matches '
        ///NOTE: The ADW amount is subject to change or the ADW may change to Security Deposit based on the selected passenger
        /// details.'
        /// </summary>
        public string UIAdwNoteCellInnerText = "\r\nNOTE: The ADW amount is subject to change or the ADW may change to Security Dep" +
            "osit based on the selected passenger\r\n details.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIYourHolidaySummaryWiWindow : BrowserWindow
    {
        
        public UIYourHolidaySummaryWiWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Your Holiday Summary";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYourHolidaySummaryDocument UIYourHolidaySummaryDocument
        {
            get
            {
                if ((this.mUIYourHolidaySummaryDocument == null))
                {
                    this.mUIYourHolidaySummaryDocument = new UIYourHolidaySummaryDocument(this);
                }
                return this.mUIYourHolidaySummaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYourHolidaySummaryDocument mUIYourHolidaySummaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIYourHolidaySummaryDocument : HtmlDocument
    {
        
        public UIYourHolidaySummaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your Holiday Summary", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/default.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your Holiday Summary");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIAdwNoteCell
        {
            get
            {
                if ((this.mUIAdwNoteCell == null))
                {
                    this.mUIAdwNoteCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIAdwNoteCell.SearchProperties[HtmlCell.PropertyNames.Id] = "adwNote";
                    this.mUIAdwNoteCell.SearchProperties[HtmlCell.PropertyNames.Name] = "";
                    this.mUIAdwNoteCell.SearchProperties.Add(new PropertyExpression(HtmlCell.PropertyNames.InnerText, "NOTE: The ADW amount is subject to chang", PropertyExpressionOperator.Contains));
                    this.mUIAdwNoteCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=\"contentText boldText hsContentIndent\" id=\"adwNote\" colspan=\"7\"";
                    this.mUIAdwNoteCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "4";
                    this.mUIAdwNoteCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUIAdwNoteCell.FilterProperties[HtmlCell.PropertyNames.Class] = "contentText boldText hsContentIndent";
                    this.mUIAdwNoteCell.WindowTitles.Add("Your Holiday Summary");
                    #endregion
                }
                return this.mUIAdwNoteCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIAdwNoteCell;
        #endregion
    }
}
