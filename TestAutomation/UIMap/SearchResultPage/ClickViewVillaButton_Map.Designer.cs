// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.SearchResultPage.ClickViewVillaButton_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class ClickViewVillaButton_Map:logWriter
    {
        
        /// <summary>
        /// ClickViewVillaButton_Method - Use 'ClickViewVillaButton_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ClickViewVillaButton_Method(string VillaNAME)
        {
            #region Variable Declarations
            HtmlHyperlink uIViewVillaHyperlink = this.UIYoursearchfound170ViWindow.UIYoursearchfound170ViDocument.UIViewVillaHyperlink;
            #endregion
            try
            {
                Mouse.Click(uIViewVillaHyperlink);
                WriteLogs("PASS : View Villa Button is clicked for Villa" +VillaNAME+ ".");
            }

            catch (AssertFailedException ex)
            {
                WriteLogs("FAIL : Could not click View Villa Button.");
                WriteLogs("----------" + ex.Message.ToString());
            }
        }

        //public void ClickViewVillaButton_Method(List<string> VillalistIDs)
        //{

        //    string resortIDStr = "";
        //    int i = 1;
        //    UITestControlCollection UI = uIViewVillaButton.FindMatchingControls();

        //    foreach (UITestControl utc in UI)
        //    {
        //        if (i == 5)
        //        {
        //            break;
        //        }
        //        else
        //        {
        //            try
        //            {
        //                bool tempFound = false;
        //                Mouse.Click(utc);
        //                string compareURL = this.UIYoursearchfound170ViWindow.Uri.ToString();
        //                foreach (string tempvillaID in VillalistIDs)
        //                {
        //                    resortIDStr = "=" + tempvillaID;
        //                    if (compareURL.Contains(resortIDStr))
        //                    {
        //                        tempFound = true;
        //                        break;
        //                    }
        //                }
        //                if (tempFound == true)
        //                {

        //                    WriteLogs("Product Page For VillaID : " + resortIDStr + " Opened Successfully: PASS");
        //                    tempFound = false;
        //                    this.UIYoursearchfound170ViWindow.Back();
        //                }
        //                else
        //                {
        //                    WriteLogs("Product Page For VillaID : " + resortIDStr + " Is Not Opened : FAIL");
        //                }

        //            }
        //            catch (Exception ex)
        //            {
        //                WriteLogs("Click View Villas :" + resortIDStr + " FAIL");
        //                WriteLogs("--------" + ex.Message.ToString()); ;
        //            }
        //            i++;
        //        }
        //    }
        //}
        
        #region Properties
        public virtual ClickViewVillaButton_MethodExpectedValues ClickViewVillaButton_MethodExpectedValues
        {
            get
            {
                if ((this.mClickViewVillaButton_MethodExpectedValues == null))
                {
                    this.mClickViewVillaButton_MethodExpectedValues = new ClickViewVillaButton_MethodExpectedValues();
                }
                return this.mClickViewVillaButton_MethodExpectedValues;
            }
        }
        
        public UIYoursearchfound170ViWindow UIYoursearchfound170ViWindow
        {
            get
            {
                if ((this.mUIYoursearchfound170ViWindow == null))
                {
                    this.mUIYoursearchfound170ViWindow = new UIYoursearchfound170ViWindow();
                }
                return this.mUIYoursearchfound170ViWindow;
            }
        }
        #endregion
        
        #region Fields
        private ClickViewVillaButton_MethodExpectedValues mClickViewVillaButton_MethodExpectedValues;
        
        private UIYoursearchfound170ViWindow mUIYoursearchfound170ViWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickViewVillaButton_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ClickViewVillaButton_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Id' property of 'View Villa' link equals 'MainContent_lvVillaInfo_villaCtrl_0_ancViewVilla_0'
        /// </summary>
        public string UIViewVillaHyperlinkId = "MainContent_lvVillaInfo_villaCtrl_0_ancViewVilla_0";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYoursearchfound170ViWindow : BrowserWindow
    {
        
        public UIYoursearchfound170ViWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your search found ", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your search found 170 Villa holidays");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYoursearchfound170ViDocument UIYoursearchfound170ViDocument
        {
            get
            {
                if ((this.mUIYoursearchfound170ViDocument == null))
                {
                    this.mUIYoursearchfound170ViDocument = new UIYoursearchfound170ViDocument(this);
                }
                return this.mUIYoursearchfound170ViDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYoursearchfound170ViDocument mUIYoursearchfound170ViDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYoursearchfound170ViDocument : HtmlDocument
    {
        
        public UIYoursearchfound170ViDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your search found", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/searchresult.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/searchresult.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your search found 170 Villa holidays");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIViewVillaHyperlink
        {
            get
            {
                if ((this.mUIViewVillaHyperlink == null))
                {
                    this.mUIViewVillaHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIViewVillaHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Id, "MainContent_lvVillaInfo_villaCtrl_", PropertyExpressionOperator.Contains));
                    this.mUIViewVillaHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "View Villa", PropertyExpressionOperator.Contains));
                    this.mUIViewVillaHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.AbsolutePath, "/villas/", PropertyExpressionOperator.Contains));
                    this.mUIViewVillaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "click to view this villa";
                    this.mUIViewVillaHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Href, ".villaplus.com/", PropertyExpressionOperator.Contains));
                    this.mUIViewVillaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ancvillaimg ancViewVilla";
                    this.mUIViewVillaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"click to view this villa\" class=\"";
                    this.mUIViewVillaHyperlink.WindowTitles.Add("Your search found 170 Villa holidays");
                    #endregion
                }
                return this.mUIViewVillaHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIViewVillaHyperlink;
        #endregion
    }
}
