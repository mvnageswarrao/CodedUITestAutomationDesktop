// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.TabSearchTile.verifyReqMonShownOnTabCalender_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyReqMonShownOnTabCalender_Map:logWriter
    {
        
        /// <summary>
        /// verifyReqMonShownOnTabCalender_Method - Use 'verifyReqMonShownOnTabCalender_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public Boolean verifyReqMonShownOnTabCalender_Method(DateTime SelectableDATE)
        {
            #region Variable Declarations
            HtmlDiv uIJuly2014Pane = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UIUidatepickergroup_1Pane.UIJuly2014Pane;
            #endregion

            Boolean IsExpMonthShownonCalender = false;

            int SelectableMonthNum = Convert.ToInt32(SelectableDATE.Month.ToString());
            System.Globalization.DateTimeFormatInfo mfi = new
            System.Globalization.DateTimeFormatInfo();
            string strMonthName = mfi.GetMonthName(SelectableMonthNum).ToString();
            string SelectableYear = SelectableDATE.Year.ToString();
            string SelectableMonthYear = strMonthName + " " + SelectableYear;
            string MonthYearonPage = uIJuly2014Pane.FriendlyName;

            uIJuly2014Pane.DrawHighlight();

            if (SelectableMonthYear.Trim() == MonthYearonPage.Trim())
            {
                IsExpMonthShownonCalender = true;
                WriteLogs("INFO : \"" + SelectableMonthYear + "\" is Shown in the Calender. ");
            }
            else
            {
                IsExpMonthShownonCalender = false;
            }

            return IsExpMonthShownonCalender;
            
            // Verify that the 'InnerText' property of 'July 2014' pane equals 'July 2014 '
            //Assert.AreEqual(this.verifyReqMonShownOnTabCalender_MethodExpectedValues.UIJuly2014PaneInnerText, uIJuly2014Pane.InnerText);
        }
        
        #region Properties
        public virtual verifyReqMonShownOnTabCalender_MethodExpectedValues verifyReqMonShownOnTabCalender_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyReqMonShownOnTabCalender_MethodExpectedValues == null))
                {
                    this.mverifyReqMonShownOnTabCalender_MethodExpectedValues = new verifyReqMonShownOnTabCalender_MethodExpectedValues();
                }
                return this.mverifyReqMonShownOnTabCalender_MethodExpectedValues;
            }
        }
        
        public UIVillaHolidaysThatYouWindow UIVillaHolidaysThatYouWindow
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouWindow == null))
                {
                    this.mUIVillaHolidaysThatYouWindow = new UIVillaHolidaysThatYouWindow();
                }
                return this.mUIVillaHolidaysThatYouWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyReqMonShownOnTabCalender_MethodExpectedValues mverifyReqMonShownOnTabCalender_MethodExpectedValues;
        
        private UIVillaHolidaysThatYouWindow mUIVillaHolidaysThatYouWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyReqMonShownOnTabCalender_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyReqMonShownOnTabCalender_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'July 2014' pane equals 'July 2014 '
        /// </summary>
        public string UIJuly2014PaneInnerText = "July 2014 ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouWindow : BrowserWindow
    {
        
        public UIVillaHolidaysThatYouWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "| Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIVillaHolidaysThatYouDocument UIVillaHolidaysThatYouDocument
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouDocument == null))
                {
                    this.mUIVillaHolidaysThatYouDocument = new UIVillaHolidaysThatYouDocument(this);
                }
                return this.mUIVillaHolidaysThatYouDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaHolidaysThatYouDocument mUIVillaHolidaysThatYouDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIVillaHolidaysThatYouDocument : HtmlDocument
    {
        
        public UIVillaHolidaysThatYouDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "| Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        #region Properties
        public UIUidatepickergroup_1Pane UIUidatepickergroup_1Pane
        {
            get
            {
                if ((this.mUIUidatepickergroup_1Pane == null))
                {
                    this.mUIUidatepickergroup_1Pane = new UIUidatepickergroup_1Pane(this);
                }
                return this.mUIUidatepickergroup_1Pane;
            }
        }
        #endregion
        
        #region Fields
        private UIUidatepickergroup_1Pane mUIUidatepickergroup_1Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUidatepickergroup_1Pane : HtmlDiv
    {
        
        public UIUidatepickergroup_1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ui-datepicker-group_1";
            this.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.Class, "ui-datepicker-group ui-datepicker-group-last", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.ControlDefinition, "class=\"ui-datepicker-group ui-datepicker-group-last\" id=\"ui-datepicker-group_1\"", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIJuly2014Pane
        {
            get
            {
                if ((this.mUIJuly2014Pane == null))
                {
                    this.mUIJuly2014Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIJuly2014Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = "ui-datepicker-title";
                    this.mUIJuly2014Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ui-datepicker-title\"";
                    this.mUIJuly2014Pane.WindowTitles.Add("Villa Holidays That You’ll Love More | Villa Plus");
                    #endregion
                }
                return this.mUIJuly2014Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIJuly2014Pane;
        #endregion
    }
}
