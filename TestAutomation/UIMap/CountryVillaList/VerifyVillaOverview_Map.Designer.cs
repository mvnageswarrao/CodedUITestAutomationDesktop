// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.CountryVillaList.VerifyVillaOverview_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    using System.Configuration;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class VerifyVillaOverview_Map:logWriter
    {
        
        /// <summary>
        /// VerifyVillaOverViewAssert_Method - Use 'VerifyVillaOverViewAssert_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        //public void VerifyVillaOverViewAssert_Method()
        //{
        //    #region Variable Declarations
        //    HtmlCustom uIItemCustom = this.UIHttpnimbusAlgarvevilWindow.UIHttpnimbusAlgarvevilDocument.UIVillaTopPane.UIItemCustom;
        //    #endregion

        //    // Verify that the 'InnerText' property of custom control matches '
        //    //
        //    //1 Bedroom 
        //    //
        //    //Beach: 2 miles 
        //    //
        //    //
        //    //
        //    //1 Bathroom 
        //    //
        //    //Shared Pool 
        //    //
        //    //
        //    //
        //    //Sleeps 2 to 3 
        //    //
        //    //Car Essential '
        //    StringAssert.Matches(uIItemCustom.InnerText, new Regex(this.VerifyVillaOverViewAssert_MethodExpectedValues.UIItemCustomInnerText));
        //}

        public void VerifyVillaOverViewAssertModified_Method(List<string> VillaOverView, string VillaName)
        {
            #region Variable Declarations
            HtmlCustom uIItemCustom = this.UIHttpnimbusAlgarvevilWindow.UIHttpnimbusAlgarvevilDocument.UIVillaTopPane.UIItemCustom;
            #endregion

            UITestControlCollection UI = uIItemCustom.FindMatchingControls();
            foreach (UITestControl utc in UI)
            {
                const string HTML_TAG_PATTERN = "<.*?>";

                string OverviewfromPage = uIItemCustom.InnerText;
                OverviewfromPage = Regex.Replace(OverviewfromPage, HTML_TAG_PATTERN, string.Empty);
                OverviewfromPage = OverviewfromPage.Replace("\r\n", string.Empty);
                OverviewfromPage = OverviewfromPage.Trim();
                //OverviewfromPage = OverviewfromPage.Replace(" ", string.Empty);
                foreach (string overview in VillaOverView)
                {
                    try
                    {
                        //Assert.AreEqual(VillaOverviewforeachVilla, OverviewfromPage);
                        StringAssert.Contains(OverviewfromPage, overview);
                        WriteLogs("PASS : OverView for Villa : " + VillaName + " : " + overview + "is shown correct.");
                    }
                    catch (AssertFailedException ex)
                    {
                        takeImage("VerifyVillaOverViewAssertModified");
                        WriteLogs("FAIL : OverView for Villa : " + VillaName + " : " + overview + "is shown Wrong.");
                        WriteLogs("----------" + ex.Message.ToString());
                    }
                }

                // Verify that the 'InnerText' property of custom control matches '
                //
                //1 Bedroom 
                //
                //Beach: 2 miles 
                //
                //
                //
                //1 Bathroom 
                //
                //Shared Pool 
                //
                //
                //
                //Sleeps 2 to 3 
                //
                //Car Essential '
                //StringAssert.Matches(uIItemCustom.InnerText, new Regex(this.VerifyVillaOverViewAssert_MethodExpectedValues.UIItemCustomInnerText));
            }
        }
        
        #region Properties
        public virtual VerifyVillaOverViewAssert_MethodExpectedValues VerifyVillaOverViewAssert_MethodExpectedValues
        {
            get
            {
                if ((this.mVerifyVillaOverViewAssert_MethodExpectedValues == null))
                {
                    this.mVerifyVillaOverViewAssert_MethodExpectedValues = new VerifyVillaOverViewAssert_MethodExpectedValues();
                }
                return this.mVerifyVillaOverViewAssert_MethodExpectedValues;
            }
        }
        
        public UIHttpnimbusAlgarvevilWindow UIHttpnimbusAlgarvevilWindow
        {
            get
            {
                if ((this.mUIHttpnimbusAlgarvevilWindow == null))
                {
                    this.mUIHttpnimbusAlgarvevilWindow = new UIHttpnimbusAlgarvevilWindow();
                }
                return this.mUIHttpnimbusAlgarvevilWindow;
            }
        }
        #endregion
        
        #region Fields
        private VerifyVillaOverViewAssert_MethodExpectedValues mVerifyVillaOverViewAssert_MethodExpectedValues;
        
        private UIHttpnimbusAlgarvevilWindow mUIHttpnimbusAlgarvevilWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyVillaOverViewAssert_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class VerifyVillaOverViewAssert_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of custom control matches '
        ///
        ///1 Bedroom 
        ///
        ///Beach: 2 miles 
        ///
        ///
        ///
        ///1 Bathroom 
        ///
        ///Shared Pool 
        ///
        ///
        ///
        ///Sleeps 2 to 3 
        ///
        ///Car Essential '
        /// </summary>
        public string UIItemCustomInnerText = "\r\n\r\n1 Bedroom \r\n\r\nBeach: 2 miles \r\n\r\n\r\n\r\n1 Bathroom \r\n\r\nShared Pool \r\n\r\n\r\n\r\nSleep" +
            "s 2 to 3 \r\n\r\nCar Essential ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHttpnimbusAlgarvevilWindow : BrowserWindow
    {
        
        public UIHttpnimbusAlgarvevilWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "/villas", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttpnimbusAlgarvevilDocument UIHttpnimbusAlgarvevilDocument
        {
            get
            {
                if ((this.mUIHttpnimbusAlgarvevilDocument == null))
                {
                    this.mUIHttpnimbusAlgarvevilDocument = new UIHttpnimbusAlgarvevilDocument(this);
                }
                return this.mUIHttpnimbusAlgarvevilDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHttpnimbusAlgarvevilDocument mUIHttpnimbusAlgarvevilDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHttpnimbusAlgarvevilDocument : HtmlDocument
    {
        
        public UIHttpnimbusAlgarvevilDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/villas", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/villas", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        #region Properties
        public UIVillaTopPane UIVillaTopPane
        {
            get
            {
                if ((this.mUIVillaTopPane == null))
                {
                    this.mUIVillaTopPane = new UIVillaTopPane(this);
                }
                return this.mUIVillaTopPane;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaTopPane mUIVillaTopPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIVillaTopPane : HtmlDiv
    {
        
        public UIVillaTopPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "villaTop";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = "";
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "villaInfo-Desc";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"villaTop\" class=\"villaInfo-Desc\"";
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.SearchProperties["TagName"] = "UL";
                    this.mUIItemCustom.FilterProperties["Class"] = "villa_like";
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = "style=\"padding: 2px; height: 110px;\" cla";
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("http://nimbus/Algarve/villas");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        #endregion
    }
}
