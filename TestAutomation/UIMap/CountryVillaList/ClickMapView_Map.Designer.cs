// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.CountryVillaList.ClickMapView_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    using System.Configuration;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class ClickMapView_Map:logWriter
    {
        
        /// <summary>
        /// ClickMapView_Method
        /// </summary>
        public void ClickMapView_Method()
        {
            #region Variable Declarations
            HtmlHyperlink uIMapViewHyperlink = this.UIHttpnimbusAlgarvevilWindow.UIHttpnimbusAlgarvevilDocument.UIDestTabPane.UIMapViewHyperlink;
            #endregion

            // Click 'Map View' link
            Mouse.Click(uIMapViewHyperlink, new Point(45, 13));
        }
        
        /// <summary>
        /// ClickMapViewAssert_Method - Use 'ClickMapViewAssert_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ClickMapViewAssert_Method(string CenterName)
        {
            #region Variable Declarations
            HtmlDiv uIWillbeimplementedlatPane = this.UIHttpnimbusAlgarvevilWindow.UIHttpnimbusAlgarvevilDocument.UIWillbeimplementedlatPane;
            #endregion

            try
            {
                // Verify that the 'DisplayText' property of 'Will be implemented later' pane equals 'Will be implemented later '
                Assert.AreEqual(this.ClickMapViewAssert_MethodExpectedValues.UIWillbeimplementedlatPaneDisplayText, uIWillbeimplementedlatPane.DisplayText);
                WriteLogs("PASS : " + CenterName + " Map View is opened Successfully");
            }
            catch(AssertFailedException ex)
            {
                takeImage("ClickMapViewAssert");
                WriteLogs("FAIL : " + CenterName + " Map View is not opened");
                WriteLogs("------------" + ex.Message.ToString());
            }
    }
        
        #region Properties
        public virtual ClickMapViewAssert_MethodExpectedValues ClickMapViewAssert_MethodExpectedValues
        {
            get
            {
                if ((this.mClickMapViewAssert_MethodExpectedValues == null))
                {
                    this.mClickMapViewAssert_MethodExpectedValues = new ClickMapViewAssert_MethodExpectedValues();
                }
                return this.mClickMapViewAssert_MethodExpectedValues;
            }
        }
        
        public UIHttpnimbusAlgarvevilWindow UIHttpnimbusAlgarvevilWindow
        {
            get
            {
                if ((this.mUIHttpnimbusAlgarvevilWindow == null))
                {
                    this.mUIHttpnimbusAlgarvevilWindow = new UIHttpnimbusAlgarvevilWindow();
                }
                return this.mUIHttpnimbusAlgarvevilWindow;
            }
        }
        #endregion
        
        #region Fields
        private ClickMapViewAssert_MethodExpectedValues mClickMapViewAssert_MethodExpectedValues;
        
        private UIHttpnimbusAlgarvevilWindow mUIHttpnimbusAlgarvevilWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickMapViewAssert_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class ClickMapViewAssert_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Will be implemented later' pane equals 'Will be implemented later '
        /// </summary>
        public string UIWillbeimplementedlatPaneDisplayText = "Will be implemented later ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHttpnimbusAlgarvevilWindow : BrowserWindow
    {
        
        public UIHttpnimbusAlgarvevilWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "/villas", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttpnimbusAlgarvevilDocument UIHttpnimbusAlgarvevilDocument
        {
            get
            {
                if ((this.mUIHttpnimbusAlgarvevilDocument == null))
                {
                    this.mUIHttpnimbusAlgarvevilDocument = new UIHttpnimbusAlgarvevilDocument(this);
                }
                return this.mUIHttpnimbusAlgarvevilDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHttpnimbusAlgarvevilDocument mUIHttpnimbusAlgarvevilDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHttpnimbusAlgarvevilDocument : HtmlDocument
    {
        
        public UIHttpnimbusAlgarvevilDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/villas", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/villas", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        #region Properties
        public UIDestTabPane UIDestTabPane
        {
            get
            {
                if ((this.mUIDestTabPane == null))
                {
                    this.mUIDestTabPane = new UIDestTabPane(this);
                }
                return this.mUIDestTabPane;
            }
        }
        
        public HtmlDiv UIWillbeimplementedlatPane
        {
            get
            {
                if ((this.mUIWillbeimplementedlatPane == null))
                {
                    this.mUIWillbeimplementedlatPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIWillbeimplementedlatPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "MapViewTab";
                    this.mUIWillbeimplementedlatPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIWillbeimplementedlatPane.FilterProperties[HtmlDiv.PropertyNames.Title] = "";
                    this.mUIWillbeimplementedlatPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "ui-tabs-panel ui-widget-content ui-corner-bottom";
                    this.mUIWillbeimplementedlatPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"overflow: hidden;\" id=\"MapViewTab";
                    this.mUIWillbeimplementedlatPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "442";
                    this.mUIWillbeimplementedlatPane.WindowTitles.Add("http://nimbus/Algarve/villas");
                    #endregion
                }
                return this.mUIWillbeimplementedlatPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDestTabPane mUIDestTabPane;
        
        private HtmlDiv mUIWillbeimplementedlatPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIDestTabPane : HtmlDiv
    {
        
        public UIDestTabPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "destTab";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = "";
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "overflow-hidden font11 Border0 ui-tabs ui-widget ui-widget-content ui-corner-all";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"destTab\" class=\"overflow-hidden font";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "27";
            this.WindowTitles.Add("http://nimbus/Algarve/villas");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIMapViewHyperlink
        {
            get
            {
                if ((this.mUIMapViewHyperlink == null))
                {
                    this.mUIMapViewHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMapViewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMapViewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMapViewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMapViewHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Map View";
                    this.mUIMapViewHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.AbsolutePath, "/villas", PropertyExpressionOperator.Contains));
                    this.mUIMapViewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "";
                    this.mUIMapViewHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Href, "/villas#MapViewTab", PropertyExpressionOperator.Contains));
                    this.mUIMapViewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "";
                    this.mUIMapViewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"#MapViewTab\"";
                    this.mUIMapViewHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIMapViewHyperlink.WindowTitles.Add("http://nimbus/Algarve/villas");
                    #endregion
                }
                return this.mUIMapViewHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIMapViewHyperlink;
        #endregion
    }
}
