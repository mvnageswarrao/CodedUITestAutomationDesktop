// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.LeadPaxPage.verifyAnotherBkfnd_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyAnotherBkfnd_Map:logWriter
    {
        
        /// <summary>
        /// verifyAnotherBkfnd_Method - Use 'verifyAnotherBkfnd_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public Boolean verifyAnotherBkfnd_Method()
        {
            #region Variable Declarations
            HtmlCell uIAnotherBookingFoundCell = this.UIAllocateLeadPassengeWindow.UIAllocateLeadPassengeDocument.UIAnotherBookingFoundCell;
            #endregion

            // Verify that the 'InnerText' property of 'Another Booking Found' cell contains 'Another Booking Found'
            //StringAssert.Contains(uIAnotherBookingFoundCell.InnerText, this.verifyAnotherBkfnd_MethodExpectedValues.UIAnotherBookingFoundCellInnerText);
            //WriteLogs("PASS : Another Booking Found popup is displayed.");
            Boolean IsAnotherBookingFound = false;
            //IsAnotherBookingFound = uIAnotherBookingFoundCell.TryFind();
            IsAnotherBookingFound = uIAnotherBookingFoundCell.InnerText.Trim().Equals("Another Booking Found");

            return IsAnotherBookingFound;
        }
        
        #region Properties
        public virtual verifyAnotherBkfnd_MethodExpectedValues verifyAnotherBkfnd_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyAnotherBkfnd_MethodExpectedValues == null))
                {
                    this.mverifyAnotherBkfnd_MethodExpectedValues = new verifyAnotherBkfnd_MethodExpectedValues();
                }
                return this.mverifyAnotherBkfnd_MethodExpectedValues;
            }
        }
        
        public UIAllocateLeadPassengeWindow UIAllocateLeadPassengeWindow
        {
            get
            {
                if ((this.mUIAllocateLeadPassengeWindow == null))
                {
                    this.mUIAllocateLeadPassengeWindow = new UIAllocateLeadPassengeWindow();
                }
                return this.mUIAllocateLeadPassengeWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyAnotherBkfnd_MethodExpectedValues mverifyAnotherBkfnd_MethodExpectedValues;
        
        private UIAllocateLeadPassengeWindow mUIAllocateLeadPassengeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyAnotherBkfnd_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyAnotherBkfnd_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Another Booking Found' cell contains 'Another Booking Found'
        /// </summary>
        public string UIAnotherBookingFoundCellInnerText = "Another Booking Found";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllocateLeadPassengeWindow : BrowserWindow
    {
        
        public UIAllocateLeadPassengeWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Allocate Lead Passenger", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Allocate Lead Passenger");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAllocateLeadPassengeDocument UIAllocateLeadPassengeDocument
        {
            get
            {
                if ((this.mUIAllocateLeadPassengeDocument == null))
                {
                    this.mUIAllocateLeadPassengeDocument = new UIAllocateLeadPassengeDocument(this);
                }
                return this.mUIAllocateLeadPassengeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIAllocateLeadPassengeDocument mUIAllocateLeadPassengeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllocateLeadPassengeDocument : HtmlDocument
    {
        
        public UIAllocateLeadPassengeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Allocate Lead Passenger", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/allocateLeadPax.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/allocateLeadPax.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Allocate Lead Passenger");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIAnotherBookingFoundCell
        {
            get
            {
                if ((this.mUIAnotherBookingFoundCell == null))
                {
                    this.mUIAnotherBookingFoundCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIAnotherBookingFoundCell.SearchProperties[HtmlCell.PropertyNames.Id] = "alertTitle";
                    this.mUIAnotherBookingFoundCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Another Booking Found";
                    this.mUIAnotherBookingFoundCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "width=\"100%\" id=\"alertTitle\" style=\"background-color: rgb(255, 255, 255);\"";
                    this.mUIAnotherBookingFoundCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUIAnotherBookingFoundCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIAnotherBookingFoundCell.WindowTitles.Add("Allocate Lead Passenger");
                    #endregion
                }
                return this.mUIAnotherBookingFoundCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIAnotherBookingFoundCell;
        #endregion
    }
}
