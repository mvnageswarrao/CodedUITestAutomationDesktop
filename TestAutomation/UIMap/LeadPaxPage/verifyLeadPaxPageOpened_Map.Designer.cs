// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.LeadPaxPage.verifyLeadPaxPageOpened_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyLeadPaxPageOpened_Map:logWriter
    {
        
        /// <summary>
        /// verifyLeadPaxPageOpened_Method - Use 'verifyLeadPaxPageOpened_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyLeadPaxPageOpened_Method()
        {
            #region Variable Declarations
            HtmlCell uILeadPassengerCell = this.UIAllocateLeadPassengeWindow.UIAllocateLeadPassengeDocument.UILeadPassengerCell;
            #endregion

            try
            {
                Assert.AreEqual(this.verifyLeadPaxPageOpened_MethodExpectedValues.UILeadPassengerCellInnerText, uILeadPassengerCell.InnerText);
                WriteLogs("PASS : Lead Pax Page is Opened Successfully. : VERIFICATION");
            }

            catch (AssertFailedException ex)
            {
                WriteLogs("FAIL : Lead Pax Page is Not Opened. : VERIFICATION");
                WriteLogs("-----------------" + ex.Message.ToString());
            }
            // Verify that the 'InnerText' property of 'Lead Passenger †' cell equals ' Lead Passenger † '
        }
        
        #region Properties
        public virtual verifyLeadPaxPageOpened_MethodExpectedValues verifyLeadPaxPageOpened_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyLeadPaxPageOpened_MethodExpectedValues == null))
                {
                    this.mverifyLeadPaxPageOpened_MethodExpectedValues = new verifyLeadPaxPageOpened_MethodExpectedValues();
                }
                return this.mverifyLeadPaxPageOpened_MethodExpectedValues;
            }
        }
        
        public UIAllocateLeadPassengeWindow UIAllocateLeadPassengeWindow
        {
            get
            {
                if ((this.mUIAllocateLeadPassengeWindow == null))
                {
                    this.mUIAllocateLeadPassengeWindow = new UIAllocateLeadPassengeWindow();
                }
                return this.mUIAllocateLeadPassengeWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyLeadPaxPageOpened_MethodExpectedValues mverifyLeadPaxPageOpened_MethodExpectedValues;
        
        private UIAllocateLeadPassengeWindow mUIAllocateLeadPassengeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyLeadPaxPageOpened_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyLeadPaxPageOpened_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Lead Passenger †' cell equals ' Lead Passenger † '
        /// </summary>
        public string UILeadPassengerCellInnerText = " Lead Passenger † ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllocateLeadPassengeWindow : BrowserWindow
    {
        
        public UIAllocateLeadPassengeWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Allocate Lead Passenger", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Allocate Lead Passenger");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAllocateLeadPassengeDocument UIAllocateLeadPassengeDocument
        {
            get
            {
                if ((this.mUIAllocateLeadPassengeDocument == null))
                {
                    this.mUIAllocateLeadPassengeDocument = new UIAllocateLeadPassengeDocument(this);
                }
                return this.mUIAllocateLeadPassengeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIAllocateLeadPassengeDocument mUIAllocateLeadPassengeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAllocateLeadPassengeDocument : HtmlDocument
    {
        
        public UIAllocateLeadPassengeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Allocate Lead Passenger", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/code_net/booking/allocateLeadPax.aspx", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/code_net/booking/allocateLeadPax.aspx", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Allocate Lead Passenger");
            #endregion
        }
        
        #region Properties
        public HtmlCell UILeadPassengerCell
        {
            get
            {
                if ((this.mUILeadPassengerCell == null))
                {
                    this.mUILeadPassengerCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUILeadPassengerCell.SearchProperties[HtmlCell.PropertyNames.Id] = "Td2";
                    this.mUILeadPassengerCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Lead Passenger † ";
                    this.mUILeadPassengerCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=\"padding-left10\" id=\"Td2\"";
                    this.mUILeadPassengerCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "7";
                    this.mUILeadPassengerCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUILeadPassengerCell.FilterProperties[HtmlCell.PropertyNames.Class] = "padding-left10";
                    this.mUILeadPassengerCell.WindowTitles.Add("Allocate Lead Passenger");
                    #endregion
                }
                return this.mUILeadPassengerCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUILeadPassengerCell;
        #endregion
    }
}
