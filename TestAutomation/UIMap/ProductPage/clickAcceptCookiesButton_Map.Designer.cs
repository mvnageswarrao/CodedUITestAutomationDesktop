// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.ProductPage.clickAcceptCookiesButton_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class clickAcceptCookiesButton_Map:logWriter
    {
        
        /// <summary>
        /// clickAcceptCookiesButton_Method
        /// </summary>
        public void clickAcceptCookiesButton_Method()
        {
            #region Variable Declarations
            HtmlHyperlink uIAcceptCookiesHyperlink = this.UIVillaHolidaysThatYouWindow.UIVillaHolidaysThatYouDocument.UICookieAccptLayerPane.UIAcceptCookiesHyperlink;
            #endregion

            if(uIAcceptCookiesHyperlink.Exists)
            {
                Mouse.Click(uIAcceptCookiesHyperlink);
                WriteLogs("PASS : Accept Cookies Layer button is clicked");
            }
                

            //if (cookieNOde <= 2)
            //{
            //    // Click 'Accept Cookies' link
                
            //}
        }
        
        #region Properties
        public UIVillaHolidaysThatYouWindow UIVillaHolidaysThatYouWindow
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouWindow == null))
                {
                    this.mUIVillaHolidaysThatYouWindow = new UIVillaHolidaysThatYouWindow();
                }
                return this.mUIVillaHolidaysThatYouWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaHolidaysThatYouWindow mUIVillaHolidaysThatYouWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIVillaHolidaysThatYouWindow : BrowserWindow
    {
        
        public UIVillaHolidaysThatYouWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIVillaHolidaysThatYouDocument UIVillaHolidaysThatYouDocument
        {
            get
            {
                if ((this.mUIVillaHolidaysThatYouDocument == null))
                {
                    this.mUIVillaHolidaysThatYouDocument = new UIVillaHolidaysThatYouDocument(this);
                }
                return this.mUIVillaHolidaysThatYouDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaHolidaysThatYouDocument mUIVillaHolidaysThatYouDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIVillaHolidaysThatYouDocument : HtmlDocument
    {
        
        public UIVillaHolidaysThatYouDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            #endregion
        }
        
        #region Properties
        public UICookieAccptLayerPane UICookieAccptLayerPane
        {
            get
            {
                if ((this.mUICookieAccptLayerPane == null))
                {
                    this.mUICookieAccptLayerPane = new UICookieAccptLayerPane(this);
                }
                return this.mUICookieAccptLayerPane;
            }
        }
        #endregion
        
        #region Fields
        private UICookieAccptLayerPane mUICookieAccptLayerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UICookieAccptLayerPane : HtmlDiv
    {
        
        public UICookieAccptLayerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "CookieAccptLayer";
            this.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "By continuing to use this site, you agre", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "cookies-layer";
            this.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.ControlDefinition, "class=\"cookies-layer\" id=\"CookieAccptLayer\"", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAcceptCookiesHyperlink
        {
            get
            {
                if ((this.mUIAcceptCookiesHyperlink == null))
                {
                    this.mUIAcceptCookiesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAcceptCookiesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Accept Cookies";
                    this.mUIAcceptCookiesHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.AbsolutePath, "AcceptCookiesPolicy;", PropertyExpressionOperator.Contains));
                    this.mUIAcceptCookiesHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Class, "cookie-layer-accept", PropertyExpressionOperator.Contains));
                    this.mUIAcceptCookiesHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.ControlDefinition, "class=\"cookie-layer-accept\" ", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUIAcceptCookiesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAcceptCookiesHyperlink;
        #endregion
    }
}
