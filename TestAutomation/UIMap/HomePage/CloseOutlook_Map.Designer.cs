// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.HomePage.CloseOutlook_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class CloseOutlook_Map:logWriter
    {
        
        /// <summary>
        /// CloseOutlook_Method
        /// </summary>
        public void CloseOutlook_Method()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIVillaPlusAlgarveMessWindow.UIItemWindow.UIRibbonPropertyPage.UICloseButton;
            WinButton uINOButton = this.UIMicrosoftOutlookWindow.UINOWindow.UINOButton;
            #endregion
            takeImage("infoLinkOutlookwindow");
            try
            {
                // Click 'Close' button
                Mouse.Click(uICloseButton, new Point(2, 12));
                WriteLogs("PASS : Click on Close Button.");
            }
            catch (AssertFailedException ex)
            {
                WriteLogs("FAIL : Click on Close Button.");
                WriteLogs("------" + ex.Message.ToString());
            }

           
        }
        
        #region Properties
        public UIVillaPlusAlgarveMessWindow UIVillaPlusAlgarveMessWindow
        {
            get
            {
                if ((this.mUIVillaPlusAlgarveMessWindow == null))
                {
                    this.mUIVillaPlusAlgarveMessWindow = new UIVillaPlusAlgarveMessWindow();
                }
                return this.mUIVillaPlusAlgarveMessWindow;
            }
        }
        
        public UIMicrosoftOutlookWindow UIMicrosoftOutlookWindow
        {
            get
            {
                if ((this.mUIMicrosoftOutlookWindow == null))
                {
                    this.mUIMicrosoftOutlookWindow = new UIMicrosoftOutlookWindow();
                }
                return this.mUIMicrosoftOutlookWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaPlusAlgarveMessWindow mUIVillaPlusAlgarveMessWindow;
        
        private UIMicrosoftOutlookWindow mUIMicrosoftOutlookWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIVillaPlusAlgarveMessWindow : WinWindow
    {
        
        public UIVillaPlusAlgarveMessWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Villa Plus Algarve ", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "rctrl_renwnd32", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Plus Algarve - Message (HTML) ");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "NetUIHWND", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Plus Algarve - Message (HTML) ");
            #endregion
        }
        
        #region Properties
        public UIRibbonPropertyPage UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonPropertyPage mUIRibbonPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIRibbonPropertyPage : WinControl
    {
        
        public UIRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Ribbon", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Plus Algarve - Message (HTML) ");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties.Add(new PropertyExpression(WinButton.PropertyNames.Name, "Close", PropertyExpressionOperator.Contains));
                    this.mUICloseButton.WindowTitles.Add("Villa Plus Algarve - Message (HTML) ");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMicrosoftOutlookWindow : WinWindow
    {
        
        public UIMicrosoftOutlookWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.Name, "Microsoft Outlook", PropertyExpressionOperator.Contains));
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "#32770", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Microsoft Outlook");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Microsoft Outlook");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Microsoft Outlook");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
