// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestAutomation.UIMap.HomePage.ClickHeatedPoolsLink_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using TestAutomation.Utility;
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class ClickHeatedPoolsLink_Map:logWriter
    {
        
        /// <summary>
        /// ClickHeatedPoolsLink_Method
        /// </summary>
        public void ClickHeatedPoolsLink_Method()
        {
            #region Variable Declarations
            HtmlAreaHyperlink uIFreeheatedpoolsvillaHyperlink = this.UIHomePageWindowsInterWindow.UIHomePageDocument.UISales1_newCustom.UIFreeheatedpoolsvillaHyperlink;
            #endregion

            // Click 'Free heated pools villas' link
            Mouse.Click(uIFreeheatedpoolsvillaHyperlink, new Point(115, 11));
            String cmprheatedpools = this.UIHomePageWindowsInterWindow.Uri.ToString();
            if (cmprheatedpools.Contains("villas-with-heated-pools"))
            {
                WriteLogs("PASS : Verify the Heated Pools Page.");
            }
            else
            {
                WriteLogs("FAIL : Verify the Heated Pools Page.");
            }
            this.UIHomePageWindowsInterWindow.Back();
        }
        
        #region Properties
        public UIHomePageWindowsInterWindow UIHomePageWindowsInterWindow
        {
            get
            {
                if ((this.mUIHomePageWindowsInterWindow == null))
                {
                    this.mUIHomePageWindowsInterWindow = new UIHomePageWindowsInterWindow();
                }
                return this.mUIHomePageWindowsInterWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIHomePageWindowsInterWindow mUIHomePageWindowsInterWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHomePageWindowsInterWindow : BrowserWindow
    {
        
        public UIHomePageWindowsInterWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Home Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Home Page");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHomePageDocument UIHomePageDocument
        {
            get
            {
                if ((this.mUIHomePageDocument == null))
                {
                    this.mUIHomePageDocument = new UIHomePageDocument(this);
                }
                return this.mUIHomePageDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHomePageDocument mUIHomePageDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIHomePageDocument : HtmlDocument
    {
        
        public UIHomePageDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Home Page";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://nimbus/";
            this.WindowTitles.Add("Home Page");
            #endregion
        }
        
        #region Properties
        public UISales1_newCustom UISales1_newCustom
        {
            get
            {
                if ((this.mUISales1_newCustom == null))
                {
                    this.mUISales1_newCustom = new UISales1_newCustom(this);
                }
                return this.mUISales1_newCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISales1_newCustom mUISales1_newCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISales1_newCustom : HtmlCustom
    {
        
        public UISales1_newCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = "sales1_new";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "sales1_new";
            this.SearchProperties["TagName"] = "MAP";
            this.FilterProperties["Class"] = "";
            this.FilterProperties.Add(new PropertyExpression("ControlDefinition", "id=sales", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Home Page");
            #endregion
        }
        
        #region Properties
        public HtmlAreaHyperlink UIFreeheatedpoolsvillaHyperlink
        {
            get
            {
                if ((this.mUIFreeheatedpoolsvillaHyperlink == null))
                {
                    this.mUIFreeheatedpoolsvillaHyperlink = new HtmlAreaHyperlink(this);
                    #region Search Criteria
                    this.mUIFreeheatedpoolsvillaHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIFreeheatedpoolsvillaHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIFreeheatedpoolsvillaHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIFreeheatedpoolsvillaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/villas-with-heated-pools/";
                    this.mUIFreeheatedpoolsvillaHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Free heated pools villas";
                    this.mUIFreeheatedpoolsvillaHyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.ControlDefinition, "title=\"Free heated pools villas\" ", PropertyExpressionOperator.Contains));
                    this.mUIFreeheatedpoolsvillaHyperlink.WindowTitles.Add("Home Page");
                    #endregion
                }
                return this.mUIFreeheatedpoolsvillaHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlAreaHyperlink mUIFreeheatedpoolsvillaHyperlink;
        #endregion
    }
}
